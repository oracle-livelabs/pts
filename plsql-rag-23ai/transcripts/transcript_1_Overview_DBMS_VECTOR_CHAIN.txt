"This video is about using the PL/SQL package DBMS_VECTOR_CHAIN. DBMS_VECTOR_CHAIN is SQL-based, allowing you to use it from your favorite Oracle host language, whether it's Java, C#, Go, Python, JavaScript, C++, Rust, COBOL, or any other. I'll contrast this DBMS_VECTOR_CHAIN-based approach with other languages and frameworks like Lang Chain and Le'Ron DEX, which are open-source frameworks for retrieval, augmented generation, and similarity search.
 

With DBMS_VECTOR_CHAIN, you can utilize PL/SQL and SQL for retrieval and similarity search. In contrast, with Lang Chain, Learned Index Structures, and their JavaScript equivalents, you directly make function calls from either Python or JavaScript. These are different ways of solving the same problem. If you prefer using DBMS_VECTOR_CHAIN, it may be of interest. If you don't understand PL/SQL or prefer not to use it, then either the Python or JavaScript equivalents may be preferable.

This video will focus on what DBMS_VECTOR_CHAIN is, while subsequent videos will demonstrate how to use the PL/SQL package. In all cases, the objective is to process files or documents for similarity search or retrieval.

DBMS_VECTOR_CHAIN provides built-in support for over 150 different file formats. You can take these formats, load them into the Oracle database, and convert them to plain text. Once in plain text, you can perform tasks such as converting them to HTML, creating summaries, or segmenting the documents into smaller chunks for vectorization. When it comes to vectorizing the chunks, you have many choices, including using the Victor embedding sequel function built into Oracle AI Vector Search or making REST calls to other public APIs.

In these examples, you're simply making calls to the DBMS_VECTOR_CHAIN. You communicate with and invoke its procedures, always calling the same procedure but specifying a parameter in JSON format to indicate the particular backend you're interfacing with, whether it's something as simple as the Oracle database or something more complex like Google, Hugging Face, OCA, GNI, or Vertex.

Similarly, when summarizing either your text document or the smaller chunks from your text document, you have choices. You can do it via PL/SQL with the Victor embedding sequel function, or you can use REST endpoints from public interfaces. Once again, you have many options.

Additionally, you can utilize language models for generative AI to generate text from the inputs you provide. So, once again, you have many choices, including utilizing OCI Gen0 or Google's LADS language models.

In summary, with DBMS_VECTOR_CHAIN, you can perform retrieval, generation, and similarity search, and you have various options for how to accomplish these tasks. In the next videos, we'll provide examples of how to use DBMS_VECTOR_CHAIN."